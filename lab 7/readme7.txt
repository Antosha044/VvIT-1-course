Лабораторная работа №7  Работа с классами ч.3

Цель работы: Разработать систему управления сотрудниками, демонстрирующую множественное наследование, инкапсуляцию и полиморфизм в Python. Система должна уметь обрабатывать различные типы сотрудников, включая менеджеров и технических специалистов, а также предоставлять возможность для расширения и добавления новых ролей.
Задание

1.Создал класс Employee с общими атрибутами name (имя), id (идентификационный номер) и методами get_info(), который возвращает базовую информацию о сотруднике, и code, который возвращает id сотрудника в двоичном виде. Здесь я использовал **kwargs, что позволяет функции принимать любое количество именованных аргументов.
2.Создал класс Manager, наследующий от Employee с дополнительными атрибутами department (отдел), salary (зарплата), project_name (азвание проекта), period (сроки)  и методом manage_project(), символизирующим управление проектами и методом get_info_manager, который возвращает информацию о сотруднике.
3.Создал класс Technician с уникальными атрибутами specialization (специализация), test_score (результат теста по специальности), и методом, perform_maintenance(), означающим выполнение технического обслуживания, demolition(), означающим снос баз данных, а также метот get_info_technician, который возвращает информацию о сотруднике.
4.Создал класс TechManager, который наследует как Manager, так и Technician. Этот класс комбинирует управленческие способности и технические навыки.
5.Добавил метод add_employee(), который позволяет TechManager добавлять сотрудников в список подчинённых.
6.Реализовал метод get_team_info(), который выводит информацию о всех подчинённых сотрудниках.
7.Создал объекты каждого класса и проверил их функциональность.
